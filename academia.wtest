import academia.*
import cosas.*
import muebles.*






describe "Academia de Magia" {

	/* ACLARACIÓN 
	 El test asume todos los objetos como instancias de clases. 
	  Si el diseño de la solución utiliza objetos bien conocidos en algunos casos entonces 
	  se debe remover la declaración de la constante y el comentario que se sugiere la instanciación.
	 */
	const pelota = new Cosa(volumen = 3, marca = cuchuflito, esMagico = false, esReliquia = false) // TODO: construir/obtener una cosa con volumen = 3, marca = cuchuflito, no es mágica ni una reliquia
	const escoba = new Cosa(volumen = 4, marca = acme, esMagico = true, esReliquia = true) // TODO: construir/obtener una cosa con volumen = 4, marca = acme, es mágica y una reliquia
	const varita = new Cosa(volumen = 1, marca = fenix, esMagico = true, esReliquia = false) // TODO: construir/obtener una cosa con volumen = 1, marca = fenix, es mágica pero no es una reliquia
	const pava = new Cosa(volumen = 2, marca = acme, esMagico = false, esReliquia = true) // TODO: construir/obtener una cosa con volumen = 2, marca = acme, no es magica pero sí una reliquia
	const lamparaAladino = new Cosa(volumen = 3, marca = fenix, esMagico = true, esReliquia = true) // TODO: construir/obtener una cosa con volumen = 3, marca = fenix, es mágica y una reliquia
	const baul = new Baul(volumenMaximo = 5, cosas = #{escoba}) // TODO: construir/obtener un baúl con volumen máximo = 5 y la escoba dentro
	const gabineteMagico = new GabineteMagico(cosas = #{varita}, precio = 6) // TODO: construir/obtener un gabinete mágico con la varita dentro. El precio = 6 (segunda parte)
	const armario = new Armario(cantidadMaxima = 2, cosas = #{pelota}) // TODO: construir/obtener un armario con cantidad máxima = 2 y la pelota dentro
	const academia = new Academia(muebles = #{baul, gabineteMagico, armario}) // TODO: construir/obtener una academia que tiene el baúl, el gabinete mágico y el armario

/* ACLARACIÓN
  Los tests están comentados para evitar errores y warnings, así poder ir incorporándolos 
  a medida que se avanza con la solución del ejercicio
 */


 	test "punto 1.1 saber si está guardado algo" {
  		assert.that(academia.estaGuardada(varita))// TODO: Verificar que la varita está guardada en la academia
  		assert.that(academia.estaGuardada(pelota))// TODO: Verificar que la pelota está guardada en la academia
  		assert.that(academia.estaGuardada(escoba))// TODO: Verificar que la escoba está guardada en la academia
  		assert.notThat(academia.estaGuardada(pava))// TODO: Verificar que la pava NO está guardada en la academia
  		assert.notThat(academia.estaGuardada(lamparaAladino))// TODO: Verificar que la lámpara NO está guardada en la academia 	
		}
 

  	test "punto 1.2, saber en que mueble esta guardado algo" {
  		assert.equals(gabineteMagico, academia.muebleDondeEsta(varita))	// TODO: Verificar que el mueble donde se guarda la varita está es el gabinete mágico
  		assert.equals(armario, academia.muebleDondeEsta(pelota))// TODO: Verificar que el mueble donde se guarda la pelota está guardada es el armario
  		assert.equals(baul, academia.muebleDondeEsta(escoba))// TODO: Verificar que el mueble donde se guarda la escoba está guardada es el baúl
  	}

  	test "punto 1.3, saber si se puede guardar algo" {
  		assert.notThat(academia.sePuedeGuardar(varita))// TODO: Verificar que la varita NO se puede guardar en la academia
  		assert.notThat(academia.sePuedeGuardar(pelota))// TODO: Verificar que la pelota NO se puede guardar en la academia
  		assert.notThat(academia.sePuedeGuardar(escoba))// TODO: Verificar que la escoba NO se puede guardar en la academia
  		assert.that(academia.sePuedeGuardar(pava))// TODO: Verificar que la pava se puede guardar en la academia
  		assert.that(academia.sePuedeGuardar(lamparaAladino))// TODO: Verificar que la lámpara se puede guardar en la academia
  		armario.cantidadMaxima(1)// TODO: Cambiar la capacidad del armario a 1
  		assert.notThat(academia.sePuedeGuardar(pava))// TODO: Verificar que ahora la pava NO se puede guardar en la academia
  	}

  	test "punto 1.4 saber en que muebles se puede guardar algo" {
  		assert.equals(#{armario}, academia.muebleDondeGuardar(pava))// TODO: Verificar que al preguntar en que muebles se puede guardar la pava se obtiene el armario
  		assert.equals(#{armario, gabineteMagico}, academia.muebleDondeGuardar(lamparaAladino))// TODO: Verificar al preguntar en que muebles se puede guardar la lámpara se obtienen el armario y el gabinete mágico
  	}

  	test "punto 1.5. guardar una cosa" {
  		academia.guardar(pava)// TODO: Guardar la pava en la academia
  		assert.that(academia.estaGuardada(pava))// TODO: Verificar que la pava está guardada en la academia
  		academia.guardar(lamparaAladino)// TODO: Guardar la lámpara en la academia
  		assert.that(academia.estaGuardada(lamparaAladino))// TODO: Verificar que la lámpara está guardada en la academia
  		assert.throwsException({ academia.guardar(escoba) })// TODO: Guardar la escoba en la academia (NO SE PUEDE!)
  		assert.throwsException({ academia.guardar(pelota) })// TODO: Guardar la pelota en la academia (NO SE PUEDE!)
  		assert.throwsException({ academia.guardar(varita) })// TODO: Guardar la varita en la academia (NO SE PUEDE!)
  	}

  	test "punto 1.5 no poder guardar una cosa por culpa de que no hay mueble" {
  		armario.cantidadMaxima(1)// TODO: Cambiar la capacidad del armario a 1
  		assert.throwsException({ academia.guardar(pava) })/// TODO: Guardar la pava en la academia (NO SE PUEDE!)
  		assert.notThat(academia.estaGuardada(pava))// TODO: Verificar que la pava NO está guardada en la academia
  	}

 	test "punto 2.1 utilidad" {
  		armario.agregar(pava)// TODO: Guardar la pava en el armario
  		gabineteMagico.agregar(lamparaAladino)// TODO: Guardar la lámpara en el gabinete mágico
  		var baulMagico = new BaulMagico(volumenMaximo = 12, cosas = #{escoba, lamparaAladino}) // TODO: construir/obtener un baúl mágico con volumen máximo = 12 y con la escoba y la lámpara dentro
  		assert.equals(1.1, armario.utilidad())// TODO: Verificar que la utilidad del armario es 1.1
  		assert.equals(3, gabineteMagico.utilidad())// TODO: Verificar que la utilidad del ganibete mágico es 3
  		assert.equals(4, baul.utilidad())// TODO: Verificar que la utilidad del baúl es 4
  		assert.equals(5, baulMagico.utilidad())// TODO: Verificar que la utilidad del baúl mágico es 5
  	}

  	test "punto 2.2 cosas menos utiles" {
  		armario.agregar(pava)// TODO: Guardar la pava en el armario
  		gabineteMagico.agregar(lamparaAladino)// TODO: Guardar la lámpara en el gabinete mágico
  		assert.equals(#{pelota, varita, escoba}, academia.cosasMenosUtiles().asSet())// TODO: Verificar que las cosas menos útiles en la academia son la pelota, la varita y la escoba
  	}

 	test "punto 2.3 marca de cosa menos util" {
  		armario.agregar(pava)// TODO: Guardar la pava en el armario
  		gabineteMagico.agregar(lamparaAladino)// TODO: Guardar la lámpara en el gabinete mágico
  		assert.equals(cuchuflito, academia.marcaCosaMenosUtil())// TODO: Verificar que la marca menos útil de la academia es cuchuflito
  	}

  	test "punto 2.4 remover cosas menos utiles que no son magicas" {
  		armario.agregar(pava)// TODO: Guardar la pava en el armario
  		gabineteMagico.agregar(lamparaAladino)// TODO: Guardar la lámpara en el gabinete mágico
  		academia.removerCosasMenosUtilesNoMagicas()// TODO: Remover las cosas menos útiles de la academia que no son mágicas
  		assert.that(academia.estaGuardada(varita))// TODO: Verificar que la varita está guardada en la academia
  		assert.notThat(academia.estaGuardada(pelota))// TODO: Verificar que la pelota NO está guardada en la academia
  		assert.that(academia.estaGuardada(escoba))// TODO: Verificar que la escoba está guardada en la academia
  		assert.that(academia.estaGuardada(pava))// TODO: Verificar que la pava está guardada en la academia
  		assert.that(academia.estaGuardada(lamparaAladino))// TODO: Verificar que la lámpara está guardada en la academia
  	}

  	test "punto 2.4 imposible remover cosas menos utiles que no son magicas" {
  		academia.quitarMueble(gabineteMagico)// TODO: Hacer que la academia tenga solamente el armario y el baúl
  		assert.throwsException({ academia.removerCosasMenosUtilesNoMagicas() })// TODO: Remover las cosas menos útiles de la academia que no son mágicas (NO SE PUEDE!)
  	}
}

